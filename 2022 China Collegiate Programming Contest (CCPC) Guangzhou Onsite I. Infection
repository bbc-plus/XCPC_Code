#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

int qpow(int a, int b, int p)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
        {
            res = res * a % p;
        }
        a = a * a % p;
        b >>= 1;
    }
    return res;
}

void solve()
{
    const int MOD = 1e9 + 7;
    int n;
    cin >> n;
    vector<vector<int>> e(n, vector<int>());
    for (int i = 0; i < n - 1; i++)
    {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        e[u].push_back(v);
        e[v].push_back(u);
    }
    vector<int> a(n), b(n), c(n), invc(n);
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        cin >> a[i] >> b[i] >> c[i];
        sum += a[i];
        invc[i] = qpow(c[i], MOD - 2, MOD);
    }
    int invsum = qpow(sum, MOD - 2, MOD);

    vector<int> ans(n + 1, 0), siz(n, 0);
    vector<vector<int>> f(n, vector<int>(n + 1, 0)), g(n, vector<int>(n + 1, 0));
    auto dfs = [&](auto dfs, int u, int fa) -> void
    {
        siz[u] = 1;
        f[u][1] = b[u] * invc[u] % MOD;
        g[u][1] = a[u] * invsum % MOD;
        for (auto v : e[u])
        {
            if (v == fa)
            {
                continue;
            }
            dfs(dfs, v, u);
            vector<int> newf(n + 1, 0), newg(n + 1, 0);
            for (int i = siz[u] + siz[v]; i >= 0; i--)
            {
                for (int j = max(0LL, i - siz[u]); j <= min(i, siz[v]); j++)
                {
                    newf[i] += f[u][i - j] * f[v][j] % MOD;
                    newf[i] %= MOD;
                    newg[i] += g[u][i - j] * f[v][j] % MOD + f[u][i - j] * g[v][j] % MOD;
                    newg[i] %= MOD;
                }
            }
            siz[u] += siz[v];
            f[u] = move(newf);
            g[u] = move(newg);
        }
        f[u][0] = ((1 - b[u] * invc[u]) % MOD + MOD) % MOD;
        for (int i = 1; i <= n; i++)
        {
            if (u == 0)
            {
                ans[i] += g[u][i];
            }
            else
            {
                ans[i] += g[u][i] * ((1 - b[fa] * invc[fa]) % MOD + MOD) % MOD;
            }
            ans[i] %= MOD;
        }
    };
    dfs(dfs, 0, -1);

    for (int i = 1; i <= n; i++)
    {
        cout << ans[i] << '\n';
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
