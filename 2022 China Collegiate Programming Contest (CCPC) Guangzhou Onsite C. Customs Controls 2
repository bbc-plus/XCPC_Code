#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

struct DSU
{
    vector<int> f;
    DSU(int n_)
    {
        f.assign(n_, 0);
        iota(f.begin(), f.end(), 0);
    }
    int find(int x)
    {
        while (x != f[x])
        {
            x = f[x] = f[f[x]];
        }
        return x;
    }
    void merge(int x, int y)
    {
        x = find(x);
        y = find(y);
        if (x != y)
        {
            f[x] = y;
        }
    }
};

void solve()
{
    int n, m;
    cin >> n >> m;
    vector<vector<int>> e(n, vector<int>());
    vector<pair<int, int>> pr;
    DSU dsu(n);
    for (int i = 1; i <= m; i++)
    {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        e[v].push_back(u);
        pr.push_back({u, v});
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 1; j < e[i].size(); j++)
        {
            dsu.merge(e[i][j], e[i][j - 1]);
        }
    }
    set<int> st;
    for (int i = 0; i < n; i++)
    {
        st.insert(dsu.find(i));
    }
    int _siz = st.size();
    vector<int> d(_siz, 0), grp(n, 0), mp(n, 0);
    int idx = 0;
    for (auto x : st)
    {
        mp[x] = idx++;
    }
    for (int i = 0; i < n; i++)
    {
        grp[i] = mp[dsu.find(i)];
    }
    vector<vector<int>> adj(_siz, vector<int>());
    for (int i = 0; i < m; i++)
    {
        int u = grp[pr[i].first];
        int v = grp[pr[i].second];
        adj[u].push_back(v);
        d[v]++;
    }
    queue<int> q;
    int sum = 0;
    for (int i = 0; i < _siz; i++)
    {
        if (d[i] == 0)
        {
            q.push(i);
            sum++;
        }
    }
    vector<int> ans(_siz, 1);
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        for (auto v : adj[u])
        {
            d[v]--;
            ans[v] = max(ans[v], ans[u] + 1);
            if (d[v] == 0)
            {
                q.push(v);
                sum++;
            }
        }
    }
    if (sum != _siz)
    {
        cout << "No\n";
    }
    else
    {
        cout << "Yes\n";
        vector<int> res(n, 1);
        for (int i = 0; i < m; i++)
        {
            int u = pr[i].first;
            int v = pr[i].second;
            res[v] = ans[grp[v]] - ans[grp[u]];
        }
        for (int i = 0; i < n; i++)
        {
            cout << res[i] << " \n"[i == n - 1];
        }
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
