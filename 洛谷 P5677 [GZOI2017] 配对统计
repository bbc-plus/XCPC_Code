#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> v(n + 1);
    for (int i = 1; i <= n; i++)
    {
        cin >> v[i].first;
        v[i].second = i;
    }
    sort(v.begin(), v.end());
    vector<vector<int>> good(n + 1);
    auto add_pair = [&](int p1, int p2) -> void
    {
        good[max(p1, p2)].push_back(min(p1, p2));
    };
    for (int i = 1; i <= n; i++)
    {
        if (i == 1)
        {
            add_pair(v[i].second, v[i + 1].second);
        }
        else if (i == n)
        {
            add_pair(v[i - 1].second, v[i].second);
        }
        else
        {
            int num1 = v[i].first - v[i - 1].first;
            int num2 = v[i + 1].first - v[i].first;
            if (num1 == num2)
            {
                add_pair(v[i - 1].second, v[i].second);
                add_pair(v[i].second, v[i + 1].second);
            }
            else if (num1 < num2)
            {
                add_pair(v[i - 1].second, v[i].second);
            }
            else
            {
                add_pair(v[i].second, v[i + 1].second);
            }
        }
    }
    vector<vector<pair<int, int>>> qry(n + 1);
    for (int i = 1; i <= m; i++)
    {
        int l, r;
        cin >> l >> r;
        qry[r].push_back({i, l});
    }
    struct Fenwick
    {
        int n;
        vector<int> tr;
        Fenwick(int _n)
        {
            n = _n;
            tr.resize(n + 1, 0);
        }
        int lowbit(int x)
        {
            return x & (-x);
        }
        void update(int x, int v)
        {
            while (x <= n)
            {
                tr[x] += v;
                x += lowbit(x);
            }
        }
        int query(int x)
        {
            int res = 0;
            while (x)
            {
                res += tr[x];
                x -= lowbit(x);
            }
            return res;
        }
    };
    Fenwick tree(n);
    int ans = 0, sum = 0;
    for (int r = 1; r <= n; r++)
    {
        for (auto l : good[r])
        {
            sum++;
            tree.update(l, 1);
        }
        for (auto [p, l] : qry[r])
        {
            ans += p * (sum - tree.query(l - 1));
        }
    }
    cout << ans << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
