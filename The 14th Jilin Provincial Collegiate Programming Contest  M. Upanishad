#include <bits/stdc++.h>
using namespace std;
#define int long long

struct Fenwick
{
    int n;
    vector<int> tr;
    Fenwick(int _n)
    {
        n = _n;
        tr.resize(n + 1, 0);
    }
    int lowbit(int x)
    {
        return x & -x;
    }
    void update(int x, int val)
    {
        while (x <= n)
        {
            tr[x] ^= val;
            x += lowbit(x);
        }
    }
    int query(int x)
    {
        int res = 0;
        while (x)
        {
            res ^= tr[x];
            x -= lowbit(x);
        }
        return res;
    }
    int query(int l, int r)
    {
        return query(r) ^ query(l - 1);
    }
};

struct node
{
    int id, l;
};

void solve()
{
    int n, q;
    cin >> n >> q;
    vector<int> a(n + 1), pre(n + 1);
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        pre[i] = pre[i - 1] ^ a[i];
    }
    vector<vector<node>> qry(n + 1);
    for (int i = 1; i <= q; i++)
    {
        int l, r;
        cin >> l >> r;
        qry[r].push_back({i, l});
    }
    map<int, int> last;
    Fenwick fenwick(n);
    vector<int> ans(q + 1);
    for (int r = 1; r <= n; r++)
    {
        if (last[a[r]] != 0)
        {
            fenwick.update(last[a[r]], a[r]);
        }
        fenwick.update(r, a[r]);
        last[a[r]] = r;
        for (auto [id, l] : qry[r])
        {
            ans[id] = pre[r] ^ pre[l - 1] ^ fenwick.query(l, r);
        }
    }
    for (int i = 1; i <= q; i++)
    {
        cout << ans[i] << '\n';
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
