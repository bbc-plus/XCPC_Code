#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n, q;
    cin >> n >> q;
    const int MOD = 998244353;
    vector e(n + 1, vector<int>());
    for (int i = 2; i <= n; i++)
    {
        int p;
        cin >> p;
        e[p].push_back(i);
    }

    // 预处理 f 数组即在某点子树上包含某点的连通子图个数
    vector<int> f(n + 1, 0);
    vector pre(n + 1, vector<int>()), suf(n + 1, vector<int>());
    auto dfs = [&](auto self, int u) -> int
    {
        int res = 1;
        for (auto v : e[u])
        {
            int num = self(self, v) + 1;
            num %= MOD;
            pre[u].push_back(num);
            suf[u].push_back(num);
            res *= num;
            res %= MOD;
        }
        for (int i = 1; i < pre[u].size(); i++)
        {
            pre[u][i] *= pre[u][i - 1];
            pre[u][i] %= MOD;
        }
        for (int i = (int)suf[u].size() - 2; i >= 0; i--)
        {
            suf[u][i] *= suf[u][i + 1];
            suf[u][i] %= MOD;
        }
        f[u] = res;
        return res;
    };
    dfs(dfs, 1);

    // 换根 dp
    vector<int> g = f;
    auto dfs3 = [&](auto self, int u, int ex) -> void
    {
        for (int i = 0; i < e[u].size(); i++)
        {
            int v = e[u][i];
            int tt = 1;
            if (i != 0)
            {
                tt *= pre[u][i - 1];
            }
            if (i != (int)e[u].size() - 1)
            {
                tt *= suf[u][i + 1];
            }
            tt %= MOD;
            tt *= ex;
            tt %= MOD;
            tt += 1;
            tt %= MOD;
            g[v] *= tt;
            g[v] %= MOD;
            self(self, v, tt);
        }
    };
    dfs3(dfs3, 1, 1);

    // 求 LCA
    vector<int> fa(n + 1, 0), dep(n + 1, 0), son(n + 1, 0), sz(n + 1, 0), top(n + 1, 0);
    auto dfs1 = [&](auto self, int u, int father) -> void
    {
        fa[u] = father;
        dep[u] = dep[father] + 1;
        sz[u] = 1;
        for (auto v : e[u])
        {
            self(self, v, u);
            sz[u] += sz[v];
            if (sz[son[u]] < sz[v])
                son[u] = v;
        }
    };
    auto dfs2 = [&](auto self, int u, int head) -> void
    {
        top[u] = head;
        if (son[u] == 0)
            return;
        self(self, son[u], head);
        for (auto v : e[u])
        {
            if (v == fa[u] || v == son[u])
                continue;
            self(self, v, v);
        }
    };
    auto LCA = [&](int u, int v) -> int
    {
        while (top[u] != top[v])
        {
            if (dep[top[u]] < dep[top[v]])
                swap(u, v);
            u = fa[top[u]];
        }
        return dep[u] < dep[v] ? u : v;
    };
    dfs1(dfs1, 1, 0);
    dfs2(dfs2, 1, 1);

    // 计算 f 数组的树上前缀和
    vector<int> sum(n + 1, 0);
    auto dfs4 = [&](auto self, int u, int father) -> void
    {
        sum[u] += f[u];
        sum[u] %= MOD;
        for (auto v : e[u])
        {
            if (v == father)
            {
                continue;
            }
            sum[v] += sum[u];
            sum[v] %= MOD;
            self(self, v, u);
        }
    };
    dfs4(dfs4, 1, 0);

    while (q--)
    {
        int u, v;
        cin >> u >> v;
        int lca = LCA(u, v);
        int ans = ((sum[u] - sum[lca] + sum[v] - sum[lca] + g[lca]) % MOD + MOD) % MOD;
        cout << ans << '\n';
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
