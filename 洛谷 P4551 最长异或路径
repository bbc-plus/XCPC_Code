#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n;
    cin >> n;
    vector<vector<pair<int, int>>> e(n + 1, vector<pair<int, int>>());
    for (int i = 0; i < n - 1; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        e[u].push_back({v, w});
        e[v].push_back({u, w});
    }
    vector<int> p(n + 1, 0);
    auto dfs = [&](auto dfs, int u, int fa, int val) -> void
    {
        for (auto [v, w] : e[u])
        {
            if (v == fa)
            {
                continue;
            }
            dfs(dfs, v, u, val ^ w);
        }
        p[u] = val;
    };
    dfs(dfs, 1, 0, 0);

    vector<pair<int, int>> tr(1, {0, 0});
    for (int k = 1; k <= n; k++)
    {
        int x = p[k], u = 0;
        for (int i = 30; i >= 0; i--)
        {
            if ((x >> i) & 1)
            {
                if (tr[u].second == 0)
                {
                    tr[u].second = tr.size();
                    tr.push_back({0, 0});
                }
                u = tr[u].second;
            }
            else
            {
                if (tr[u].first == 0)
                {
                    tr[u].first = tr.size();
                    tr.push_back({0, 0});
                }
                u = tr[u].first;
            }
        }
    }

    int ans = 0;
    for (int k = 1; k <= n; k++)
    {
        int cur = 0, x = p[k], u = 0;
        for (int i = 30; i >= 0; i--)
        {
            if ((x >> i) & 1)
            {
                if (tr[u].first != 0)
                {
                    cur += (1 << i);
                    u = tr[u].first;
                }
                else
                {
                    u = tr[u].second;
                }
            }
            else
            {
                if (tr[u].second != 0)
                {
                    cur += (1 << i);
                    u = tr[u].second;
                }
                else
                {
                    u = tr[u].first;
                }
            }
        }
        ans = max(ans, cur);
    }
    cout << ans << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
