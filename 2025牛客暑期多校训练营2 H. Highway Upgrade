#include <bits/stdc++.h>
using namespace std;
#define int long long

void solve()
{
    int n, m;
    cin >> n >> m;
    vector<int> u(m + 1), v(m + 1), w(m + 1), t(m + 1);
    vector<vector<pair<int, int>>> e1(n + 1), e2(n + 1);
    for (int i = 1; i <= m; i++)
    {
        cin >> u[i] >> v[i] >> t[i] >> w[i];
        e1[u[i]].push_back({v[i], t[i]});
        e2[v[i]].push_back({u[i], t[i]});
    }

    auto dijkstra = [&](int st, vector<vector<pair<int, int>>> &e) -> vector<int>
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> vis(n + 1, 0);
        vector<int> dis(n + 1, numeric_limits<int>::max() / 6);
        dis[st] = 0;
        pq.push({0, st});
        while (!pq.empty())
        {
            auto [minDis, cur] = pq.top();
            pq.pop();
            if (vis[cur] == 1)
                continue;
            vis[cur] = 1;
            for (auto [nxt, len] : e[cur])
            {
                if (vis[nxt] == 1)
                    continue;
                if (minDis + len < dis[nxt])
                {
                    dis[nxt] = minDis + len;
                    pq.push({dis[nxt], nxt});
                }
            }
        }
        return dis;
    };
    auto d1 = dijkstra(1, e1);
    auto dn = dijkstra(n, e2);

    vector<pair<int, int>> line;
    for (int i = 1; i <= m; i++)
    {
        line.push_back({-w[i], t[i] + d1[u[i]] + dn[v[i]]});
    }
    sort(line.begin(), line.end(), [&](pair<int, int> a, pair<int, int> b)
         {
    if(a.first == b.first)
        return a.second < b.second;
    return a.first > b.first; });

    auto cal = [&](pair<int, int> l1, pair<int, int> l2) -> double
    {
        return 1.0 * (l2.second - l1.second) / (l1.first - l2.first);
    };
    vector<int> id;
    vector<double> spt;
    for (int i = 0; i < line.size(); i++)
    {
        auto [k, y] = line[i];
        if (!id.empty() && k == line[id.back()].first)
        {
            continue;
        }
        if (!id.empty())
        {
            while (id.size() > 1 && cal(line[id.back()], line[id[id.size() - 2]]) >= cal(line[i], line[id[id.size() - 2]]))
            {
                id.pop_back();
                spt.pop_back();
            }
            spt.push_back(cal(line[i], line[id.back()]));
        }
        id.push_back(i);
    }

    assert(id.size() == spt.size() + 1);

    int q;
    cin >> q;
    while (q--)
    {
        int k;
        cin >> k;
        auto it = line[id[lower_bound(spt.begin(), spt.end(), (double)k) - spt.begin()]];
        cout << it.second + it.first * k << '\n';
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
