#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

int qpow(int a, int b, int p)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
        {
            res = res * a % p;
        }
        a = a * a % p;
        b >>= 1;
    }
    return res;
}

int dp[31][2][2][2];

void solve()
{
    int n, m, A, B;
    cin >> n >> m >> A >> B;
    const int MOD = 998244353;
    int ans = 0;
    ans += (A + 1) * (B + 1) % MOD;
    ans += (A + 1) * (qpow(2, m, MOD) - 2 + MOD) % MOD * (B + 1) % MOD * B % MOD * qpow(2, MOD - 2, MOD) % MOD;
    ans += (B + 1) * (qpow(2, n, MOD) - 2 + MOD) % MOD * (A + 1) % MOD * A % MOD * qpow(2, MOD - 2, MOD) % MOD;
    ans %= MOD;

    memset(dp, 0, sizeof(dp));
    dp[30][0][0][0] = 1;
    for (int i = 29; i >= 0; i--)
    {
        int bitA = (A >> i) & 1;
        int bitB = (B >> i) & 1;
        for (int fa1 = 0; fa1 < 2; fa1++)
        {
            for (int fb1 = 0; fb1 < 2; fb1++)
            {
                for (int fx1 = 0; fx1 < 2; fx1++)
                {
                    for (int na = 0; na < 2; na++)
                    {
                        for (int nb = 0; nb < 2; nb++)
                        {
                            for (int nx = 0; nx < 2; nx++)
                            {
                                if (fa1 == 0 && bitA == 0 && na == 1)
                                {
                                    continue;
                                }
                                if (fb1 == 0 && bitB == 0 && nb == 1)
                                {
                                    continue;
                                }
                                if (fx1 == 0 && na == 0 && nx == 1)
                                {
                                    continue;
                                }
                                if (fx1 == 0 && nb == 0 && nx == 1)
                                {
                                    continue;
                                }
                                int fa2 = fa1 || (na == 0 && bitA == 1);
                                int fb2 = fb1 || (nb == 0 && bitB == 1);
                                int fx2 = fx1 || (nx == 1);
                                dp[i][fa2][fb2][fx2] += dp[i + 1][fa1][fb1][fx1];
                                dp[i][fa2][fb2][fx2] %= MOD;
                            }
                        }
                    }
                }
            }
        }
    }
    int sum = 0;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            sum += dp[0][i][j][1];
            sum %= MOD;
        }
    }
    sum *= (qpow(2, n, MOD) - 2 + MOD);
    sum %= MOD;
    sum *= (qpow(2, m, MOD) - 2 + MOD);
    sum %= MOD;
    ans += sum;
    ans %= MOD;

    cout << ans << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
