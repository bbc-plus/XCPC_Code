#include <bits/stdc++.h>
using namespace std;
#define int long long

struct SuffixArray
{
    int n;
    // sa[i] 表示按字典序排序的后缀起始位置
    // rk[i] 表示后缀 i 在后缀数组中的排名
    // lc[i] 表示 sa[i] 和 sa[i+1] 的最长公共前缀长度 LCP
    vector<int> sa, rk, lc;
    SuffixArray(const string &s)
    {
        n = s.length();
        sa.resize(n);
        lc.resize(n - 1);
        rk.resize(n);
        iota(sa.begin(), sa.end(), 0);
        sort(sa.begin(), sa.end(),
             [&](int a, int b)
             {
                 return s[a] < s[b];
             });
        rk[sa[0]] = 0;
        for (int i = 1; i < n; i++)
        {
            rk[sa[i]] = rk[sa[i - 1]] + (s[sa[i]] != s[sa[i - 1]]);
        }
        int k = 1;
        vector<int> tmp, cnt(n);
        tmp.reserve(n);
        while (rk[sa[n - 1]] < n - 1)
        {
            tmp.clear();
            for (int i = 0; i < k; i++)
            {
                tmp.push_back(n - k + i);
            }
            for (auto i : sa)
            {
                if (i >= k)
                {
                    tmp.push_back(i - k);
                }
            }
            fill(cnt.begin(), cnt.end(), 0);
            for (int i = 0; i < n; i++)
            {
                cnt[rk[i]]++;
            }
            for (int i = 1; i < n; i++)
            {
                cnt[i] += cnt[i - 1];
            }
            for (int i = n - 1; i >= 0; i--)
            {
                sa[--cnt[rk[tmp[i]]]] = tmp[i];
            }
            swap(rk, tmp);
            rk[sa[0]] = 0;
            for (int i = 1; i < n; i++)
            {
                rk[sa[i]] = rk[sa[i - 1]] + (tmp[sa[i - 1]] < tmp[sa[i]] || sa[i - 1] + k == n || tmp[sa[i - 1] + k] < tmp[sa[i] + k]);
            }
            k *= 2;
        }
        for (int i = 0, j = 0; i < n; i++)
        {
            if (rk[i] == 0)
            {
                j = 0;
            }
            else
            {
                for (j -= (j > 0); i + j < n && sa[rk[i] - 1] + j < n && s[i + j] == s[sa[rk[i] - 1] + j]; j++)
                    ;
                lc[rk[i] - 1] = j;
            }
        }
    }
};

void solve()
{
    int n, m;
    cin >> n >> m;
    int num;
    auto check = [&]() -> bool
    {
        if (num * 5 >= 4 * m && num * 5 <= 6 * m)
        {
            return 1;
        }
        return 0;
    };
    for (int i = 0; i <= n / 2; i++)
    {
        num = i * (n - i) + n;
        if (check())
        {
            cout << string(i, '0') + string(n - i, '1') << '\n';
            return;
        }
    }
    if (m < 2 * n - 1)
    {
        cout << -1 << '\n';
        return;
    }
    int t = n / 3;
    num = t * t + 2 * t * (n - 2 * t) + n - t;
    if (check())
    {
        cout << string(t, '0') + string(n - 2 * t, '1') + string(t, '0') << '\n';
        return;
    }
    std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
#define random(a, b) ((a) + rng() % ((b) - (a) + 1))
    string s(n, '0');
    while (1)
    {
        for (auto &c : s)
        {
            c = random(0, 1) + '0';
        }
        num = n * (n + 1) / 2;
        SuffixArray sa(s);
        for (int i = 0; i < n - 1; i++)
        {
            num -= sa.lc[i];
        }
        if (check())
        {
            cout << s << '\n';
            break;
        }
    }
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
