#include <bits/stdc++.h>
using namespace std;
#define int long long
using i64 = long long;
using u64 = unsigned long long;

void solve()
{
    int n, q;
    cin >> n >> q;
    vector<vector<pair<int, int>>> e(n + 1, vector<pair<int, int>>());
    for (int i = 0; i < n - 1; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        e[u].push_back({v, w});
        e[v].push_back({u, w});
    }
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));

    auto dfs = [&](auto dfs, int u, int fa) -> void
    {
        for (auto [v, w] : e[u])
        {
            if (v == fa)
            {
                continue;
            }
            dfs(dfs, v, u);
            for (int i = q; i >= 1; i--)
            {
                for (int k = i - 1; k >= 0; k--)
                {
                    dp[u][i] = max(dp[u][i], dp[u][i - k - 1] + dp[v][k] + w);
                }
            }
        }
    };
    dfs(dfs, 1, 0);

    cout << dp[1][q] << '\n';
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    int T = 1;
    // cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
